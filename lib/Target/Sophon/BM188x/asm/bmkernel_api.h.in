//===---------------------------------------------------------------------===//
//
//                             The ONNC Project
//
// Copyright(c) 2018, The ONNC Team
//
// This file is part of the ONNC Project and is distributed under
// 3-clause BSD license (https://opensource.org/licenses/BSD-3-Clause)
//
// See LICENSE.TXT for details.
//
//===---------------------------------------------------------------------===//

#ifndef BM188X_BMKERNEL_API_H
#define BM188X_BMKERNEL_API_H

#include <onnc/Target/Sophon/BM188x/asm/bm188x_asm.pb.h>
#include <onnc/Target/Sophon/bmkernel_api_base.h>

namespace bmnet {

namespace bmnet_asm {
using ActivationMethod = bmnet::bm1880::Inst::ActivationMethod;

// clang-format off
{% for py_i in tg_tl.get_insts() %}
inline void {{ py_i.name }}(
    {% for p in py_i.get_prarms() %}
    {{ p.get_arg() }}{{ ")" if loop.last else "," }}
    {% endfor %}
{
    // gen asm
    if (asm_context::get_context().on())
    {
        bmnet::bm1880::CommandBuffer buf;
        auto *inst = buf.add_inst();
        auto &name = asm_context::get_context().name;
        if (not name.empty())
            inst->set_name(name);
        name.clear();
        inst->set_type("{{ py_i.name }}");
        auto *{{ py_i.short_name }} = inst->mutable_{{ py_i.short_name }}();
        {% for p in py_i.get_prarms() %}
        {% if p.type.is_vector %}
        for (size_t i = 0; i < (size_t){{ p.type.vector_size }}; i++)
            {{ py_i.short_name }}->add_{{ p.name.lower() }}({{ p.type.proto_cast("bmnet::bm1880") }}{{ p.name }}[i]);
        {% else %}
        {{ py_i.short_name }}->set_{{ p.name.lower() }}({{ p.type.proto_cast("bmnet::bm1880") }}{{ p.name }});
        {% endif %}
        {% endfor %}
        asm_context::get_context().get_fp() << buf.DebugString() << std::endl;
    }
}
{% endfor %}
// clang-format on

} // namespace bmnet_asm
} // namespace bmnet
#endif /* BM188X_BMKERNEL_API_H */
